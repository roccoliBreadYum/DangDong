<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper
  PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
  "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.ssafit.pjt.model.dao.StoreDao">
	
	<!-- 특정 store detail -->
	<select id="selectStoreDetail" parameterType="Map" resultType="Store">
		SELECT *,
           CASE WHEN EXISTS (
                  SELECT 1
                  FROM favorites
                  WHERE store_id = ${storeId} AND user_id = #{userId}
               )
           THEN true
           ELSE false
           END AS isFavorite
		FROM stores
		WHERE store_id = ${storeId};
	</select>
	
	<!-- 필터별 store 리스트 -->
	<select id="selectStore" parameterType="StoreSearchCondition" resultType="Store">
	    SELECT s.*, 
	           (SELECT COUNT(*) 
	            FROM teacher t 
	            WHERE t.store_id = s.store_id) AS teacherCount
	    FROM stores s
	    <where>
	        <if test="key != 'none'">
	            AND ${key} LIKE concat ('%', #{word}, '%')
	        </if>
	        <if test="category != -1">
	            AND s.exercise_id = #{category}
	        </if>        
	    </where>
	    <if test="orderBy != 'none'">
	        ORDER BY ${orderBy} ${orderByDir}
	    </if>
	</select>
	
	<select id="selectCategory" parameterType="int" resultType="String">
		SELECT category
		FROM exercise_category
		WHERE exercise_id = ${exerciseId}
	
	</select>
	
	<!-- 티켓 리스트 -->
	<select id="selectTicketlist" parameterType="int" resultType="SellTicket">
		SELECT *
		FROM sell_ticket
		WHERE store_id = #{storeId}
		ORDER BY `price`
	</select>

	
	<!-- 티켓 한개 가져오기 -->
	<select id="selectSellTicketById" parameterType="int" resultType="SellTicket">
		SELECT *
		FROM sell_ticket
		WHERE ticket_id = #{ticketId}
	</select>


	<!-- Store 추가 -->
	<insert id="insertStore" parameterType="Store" useGeneratedKeys="true" keyProperty="storeId">
	    INSERT INTO stores (exercise_id, store_name, address, phone_number, opening_hours, logo_image, owner_id, coin)
	    VALUES (#{exerciseId}, #{storeName}, #{address}, #{phoneNumber}, #{openingHours}, #{logoImage}, #{ownerId}, #{coin})
	</insert>

    <insert id="insertStorePicture" parameterType="PictureStorage">
        INSERT INTO store_pictures (picture_id, store_id)
        VALUES (#{pictureId}, #{storeId})
    </insert>
    
    <!-- Store 수정 -->
	<update id="updateStore" parameterType="Store">
		UPDATE stores
		SET 
		<trim prefixOverrides=",">
	        	<if test="excerciseId != null">
	        		, exercise_id = #{excerciseId}
	        	</if>
	        	<if test="address != null">
	        		, address = #{address}
	        	</if>
	        	<if test="phoneNumber != null">
	        		, phone_number = #{phoneNumber}
	        	</if>
	        	<if test="openingHours != null">
	        		, opening_hours = #{openingHours}
	        	</if>
	        	<if test="logoImage != null">
	        		, logo_image = #{logoImage}
	        	</if>
       	</trim>
		WHERE store_id = #{storeId}
	</update>
	
  <!-- 이미지 선택 (2개) -->
	<select id="selectAllimg" parameterType="int" resultType="String">
		SELECT picture_id
		FROM store_pictures
		WHERE store_id = #{storeId}
		ORDER BY create_date DESC
		LIMIT 2;
	</select>

	<select id="selectNamebyId" parameterType="int" resultType="String">
		SELECT store_name
		FROM stores
		WHERE store_id = #{storeId}
	</select>
</mapper>