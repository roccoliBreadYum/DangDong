<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper
  PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
  "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.ssafit.pjt.model.dao.ReservationDao">




	<!-- 해당 아이디에 맞는 전체 예약 리스트를 가져온다. (캘린더 활용)-->
	<select id="selectAllReservationById" parameterType="String" resultType="Reservation">
		SELECT *
		FROM reservation
		WHERE user_id = #{userId}
	</select>

	<!-- 해당 아이디에 맞는 전체 예약 리스트를 가져온다. (캘린더 활용)-->
	<select id="selectReservationById" parameterType="String" resultType="Reservation">
		SELECT *
		FROM reservation
		WHERE user_id = #{userId} AND date >= NOW()
	</select>

	<!-- 해당 날짜에 맞는 전체 예약 리스트를 가져온다.-->
	<select id="selectReservationByDate" parameterType="Map" resultType="Reservation">
	    SELECT 
	    r.*, 
	    s.store_name AS storeName,
	    ec.category AS exerciseCategory,
	    s.exercise_id AS exerciseCategoryNum,
	    DATE_FORMAT(l.date, '%H:%i') AS time,
	    CASE 
	        WHEN r.ticket_id IS NOT NULL AND r.ticket_id != 0 THEN 
	            CASE t.category 
	                WHEN 0 THEN '다회권'
	                WHEN 1 THEN '정기권'
	                ELSE '알수없음'
	            END
	        ELSE '코인결제'
	    END AS ticketCategory
	FROM 
	    reservation r
	JOIN 
	    stores s ON r.store_id = s.store_id
	JOIN 
	    exercise_category ec ON s.exercise_id = ec.exercise_id
	JOIN 
	    lesson l ON r.lesson_id = l.lesson_id
	LEFT JOIN 
	    tickets t ON r.ticket_id = t.ticket_id AND r.ticket_id != 0
	WHERE 
	    YEAR(r.date) = YEAR(#{date}) 
	    AND MONTH(r.date) = MONTH(#{date}) 
	    AND DATE(r.date) = DATE(#{date})
	    AND r.user_id = #{userId};
	
	</select>

	
	<!-- 예약 완료시 해당 예약내역을 예약DB에 넣는다. -->
	<insert id="insertReservation" parameterType="Reservation" keyProperty="reservationId" useGeneratedKeys="true">
		INSERT INTO reservation (payment, user_id, store_id, lesson_id, ticket_id, coin, date)
		VALUES (#{payment}, #{userId}, #{storeId}, #{lessonId}, #{ticketId}, #{coin}, #{date})
	</insert>
	
	<!-- 예약 취소시 해당 예약을 DB에서 삭제한다. -->
	<delete id="deleteReservation" parameterType="int" >
		DELETE FROM reservation
		WHERE reservation_id = ${reservationId}
	</delete>
	
	<update id="decreaseCoin" parameterType="map">
		UPDATE users
		SET	coin = coin - #{coin}
		WHERE id = #{userId} AND coin >= #{coin}
	</update>
	
	
	
</mapper>
	